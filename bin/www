#!/usr/bin/env node

/**
 * Module dependencies.
 */

 var app = require("../app");
 var debug = require("debug")("exp-critter-explorer:server");
 var http = require("http");
 var fs = require("fs");
 var path = require("path");
 
 // Create a write stream for server logs
 const serverLogStream = fs.createWriteStream(path.join(__dirname, "../server.log"), { flags: "a" });
 
 /**
  * Get port from environment and store in Express.
  */
 
 var port = normalizePort(process.env.PORT || "3000");
 app.set("port", port);
 
 /**
  * Create HTTP server.
  */
 
 var server = http.createServer(app);
 
 /**
  * Listen on provided port, on all network interfaces.
  */
 
 server.listen(port);
 server.on("error", onError);
 server.on("listening", onListening);
 
 /**
  * Normalize a port into a number, string, or false.
  */
 
 function normalizePort(val) {
   var port = parseInt(val, 10);
 
   if (isNaN(port)) {
     // named pipe
     return val;
   }
 
   if (port >= 0) {
     // port number
     return port;
   }
 
   return false;
 }
 
 /**
  * Event listener for HTTP server "error" event.
  */
 
 function onError(error) {
   if (error.syscall !== "listen") {
     throw error;
   }
 
   var bind = typeof port === "string"
     ? "Pipe " + port
     : "Port " + port;
 
   // Handle specific listen errors with friendly messages
   switch (error.code) {
     case "EACCES":
       const errorMessage1 = `${new Date().toISOString()} - ${bind} requires elevated privileges\n`;
       console.error(errorMessage1);
       serverLogStream.write(errorMessage1);
       process.exit(1);
       break;
     case "EADDRINUSE":
       const errorMessage2 = `${new Date().toISOString()} - ${bind} is already in use\n`;
       console.error(errorMessage2);
       serverLogStream.write(errorMessage2);
       process.exit(1);
       break;
     default:
       throw error;
   }
 }
 
 /**
  * Event listener for HTTP server "listening" event.
  */
 
 function onListening() {
   var addr = server.address();
   var bind = typeof addr === "string"
     ? "pipe " + addr
     : "port " + addr.port;
   const logMessage = `${new Date().toISOString()} - Listening on ${bind}\n`;
   console.log(logMessage);
   serverLogStream.write(logMessage);
 }
 